from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from . import pymongo
import json, time, hashlib
from bson import binary
from bson.objectid import ObjectId
from . import pyredis



def response(code: int, message: str, data: any=None):
    body = {'code':code, 'message':message,'data':{}}
    if data is not None:
        if hasattr(data, '__dict__'):
            body['data'] = data.__dict__
        else:
            body['data']=data
    return HttpResponse(json.dumps(body, sort_keys=True))





# gets the list of campsites
@require_http_methods('GET')
def campList(request):
    # we use a list as the data will be displayed as list
    camps = []
    datas = pymongo.MongoDB.camps.find({}, {"_id":1, "title":1, "rating":1, "desc":1, "imgs":1}).sort("time", -1).limit(100)
    for data in datas:
        camps.append({
            "id" : str(data["_id"]),
            "title":data["title"],
            "rating":int(data["rating"]),
            "desc":data["desc"],
            "imgs":data["imgs"],
        })
    return response(0, "ok", camps)





# gets the details of a campsite, the input being the campsite id
@require_http_methods('GET')
def detail(request):
    id = request.GET.get("id", "")

    camp = {}
    # first check redis
    # if cached, just return
    cacheDetail = pyredis.GetCampDetail(id)
    if cacheDetail is not None:
        return response(0, "ok", detail)
    # if not read from DB, if DB has data, return it and cache in redis
    # if there are new comments, delete cached data
    data = pymongo.MongoDB.camps.find_one({"_id":ObjectId(id)})
    if data is None:
        return response(1, "Campsite doesn't exist")
    camp = {
        "id":str(data["_id"]),
        "user":data["user"],
        "title":data["title"],
        "rating":data["rating"],
        "desc":data["desc"],
        "lat":data["lat"],
        "lng":data["lng"],
        "address":data["address"],
        "comments":data["comments"],
        "time":int(data["time"]),
        "img":data["imgs"],
    }
    pyredis.SetCampDetail(id, camp)# cache recently requested data to redis
    return response(0, "ok", camp)





# gets the comments for a campsite, the input being the campsite id
@require_http_methods('GET')
def comments(request):
    campID = request.GET.get("campID", "")
    result = []
    datas = pymongo.MongoDB.comments.find({"campID":campID}).sort("time",-1).limit(10)
    for data in datas:
        result.append({
            "id":str(data["_id"]),
            "campID":data["campID"],
            "user":data["user"],
            "rating":int(data["rating"]),
            "time":int(data["time"]),
            "desc":data["desc"],
        })
    return response(0, "ok", result)





# add comments for a certain campsite, input is campsite id and the comment itself
# using post method, input format is JSON
@require_http_methods('POST')
def commentAdd(request):
    request.body
    if str(request.body, 'utf-8') == '':
        return response(1, "Arguments required")
    
    comment = {
        "campID":"",
        "user":"",
        "rating":0,
        "time": int(time.time()),
        "desc":"",
    }
    
    param = json.loads(request.body)
    if "campID" not in param or param["campID"]=="":
        return response(1, "Camp ID required")
    comment["campID"] = param["campID"]
    
    camp = pymongo.MongoDB.camps.find_one({"_id":ObjectId(param["campID"])})
    if camp is None:
        return response(1, "Campsite doesn't exist")

    if "user" not in param or param["user"]=="":
        return response(1, "User name required")
    comment["user"] = param["user"]

    if "rating" not in param:
        return response(1, "Rating required")
    comment["rating"] = param["rating"]

    if "desc" not in param or param["desc"]=="":
        return response(1, "Description required")
    comment["desc"] = param["desc"]

    pymongo.MongoDB.comments.insert_one(comment)

    avgRating = int(((camp["rating"]*camp["comments"])+comment["rating"])/(camp["comments"]+1))
    pymongo.MongoDB.camps.update_one({"_id":ObjectId(param["campID"])}, {"$inc":{"comments":1}, "$set":{"ratings":avgRating}})

    pyredis.DelCampDetail(param["campID"])  # delete cached data as it's updated
    return response(0, "ok")






# for uploading images, format specified below
# {"_id":"unique ID generated by mongo", "md5":"unique id for us to use", "type":"jpg/png", "body":"binary info"}
@require_http_methods('POST')
def upload(request):
    f = request.FILES['file']

    body = f.read()
    md5 = hashlib.md5(body).hexdigest()
    typ = f.content_type

    #check if image already exists
    img = pymongo.MongoDB.images.find_one({"md5":md5})
    if img is not None:
        return response(0, "ok", {"id":str(img["_id"])})
    
    data = {"md5":md5, "type":typ, "body":binary.Binary(body)}
    ret = pymongo.MongoDB.images.insert_one(data)
    return response(0, "ok", {"id":str(ret.inserted_id)})






# api for getting the image through image id
@require_http_methods('GET')
def file(request):
    id = request.GET.get('id', "")

    img = pymongo.MongoDB.images.find_one({"_id":ObjectId(id)})
    if img is None:
        return response(100, "Image doesn't exist")
    
    return HttpResponse(img['body'], img['type'])







# adds new campsites
# using post method, input format is JSON
@require_http_methods('POST')
def campAdd(request):
    request.body
    if str(request.body, 'utf-8') == '':
        return response(1, "Arguments required")
    
    camp = {
        "id":"", 
        "user":"",
        "title":"", 
        "rating":0,
        "desc":"", 
        "lat":0, 
        "lng":0,
        "address":"", 
        "comments":0, 
        "time":int(time.time()),#timestamp on the server side, works regardless of timezone
        "imgs":[]
    }
    
    param = json.loads(request.body)

    if "title" not in param or param["title"] == "":
        return response(1, "Title is required")
    camp["title"] = param["title"]
    
    if "user" not in param or param["user"] == "":
        return response(1, "User name is required")
    camp["user"] = param["user"]
    if "rating" not in param:
        return response(1, "Rating is required")
    camp["rating"] = param["rating"]
    if "desc" not in param:
        return response(1, "Description is required")
    camp["desc"] = param["desc"]
    if "lat" not in param or "lng" not in param:
        return response(1, "Longitude and latitude are required")
    camp["lat"] = param["lat"]
    camp["lng"] = param["lng"]
    if "address" not in param or param["address"]=="":
        return response(1, "Address is required")
    camp["address"] = param["address"]
    if "imgs" not in param:
        return response(1, "Images are required")
    camp["imgs"]  = param["imgs"]

    pymongo.MongoDB.camps.insert_one(camp)

    # don't return camp, because db added an id,not serialisable
    return response(0, "ok")